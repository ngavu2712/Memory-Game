{"version":3,"sources":["components/Card/card.js","components/Score/score.js","components/Wrapper/wrapper.js","App.js","index.js"],"names":["Card","props","className","console","log","image","onClick","shuffleCard","id","src","alt","Score","classNamw","score","topScore","Wrapper","children","App","state","status","futurama","newFuturama","map","card","toString","includes","clicked","setState","undefined","sort","Math","random","this","character","style","key","href","Component","ReactDOM","render","document","getElementById"],"mappings":"qjEAqBeA,G,MAjBF,SAAAC,GAGT,OAEI,yBAAKC,UAAU,4BACVC,QAAQC,IAAIH,EAAMI,OAEnB,yBAAKH,UAAU,cAAcI,QAAS,WAElCL,EAAMM,YAAYN,EAAMO,KAEzBA,GAAIP,EAAMO,GAAIC,IAAKR,EAAMI,MAAOK,IAAKT,EAAMS,SCD3CC,G,MAXH,SAAAV,GAGR,OACI,yBAAKW,UAAU,aACX,wBAAIV,UAAU,SAAd,gBAAoCD,EAAMY,MAA1C,iBAA+DZ,EAAMa,aCKlEC,G,MAVC,SAAAd,GAGZ,OACI,yBAAKC,UAAU,WACVD,EAAMe,Y,OC2HJC,G,kNA1HXC,MAAQ,CACJC,OAAQ,GACRL,SAAU,EACVD,MAAO,EACPO,Y,EAIJb,YAAc,SAAAC,GAKV,IAAIa,EAAc,EAAKH,MAAME,SAASE,KAAK,SAAAC,GAuB3C,OAnBOA,EAAKf,GAAGgB,WAAWC,SAASjB,KACxBe,EAAKG,QAEH,EAAKC,SAAS,CAACd,MAAO,KAIvB,EAAKc,SAAS,CAACd,MAAO,EAAKK,MAAML,MAAM,IAEhC,EAAKK,MAAML,OAAS,EAAKK,MAAMJ,UAE9B,EAAKa,SAAS,CAACb,SAAW,EAAKI,MAAMJ,SAAU,IAGvDS,EAAKG,SAAU,IAKpBH,KAKiB,IAArB,EAAKL,MAAML,QACVQ,EAAcA,EAAYC,KAAI,SAAAC,GAE1B,OADAA,EAAKG,aAAUE,EACRL,MAIfF,EAAcA,EAAYQ,MAAK,WAC5B,OAAOC,KAAKC,SAAU,MAEvB,EAAKJ,SAAS,CAACP,SAAWC,K,uDAItB,IAAD,OAEL,OAEI,yBAAKnB,UAAU,OAGhB,yBAAKA,UAAY,OACb,wBAAIA,UAAW,8BACX,wBAAIA,UAAW,YACV,uBAAGA,UAAU,mBACb,kBAAC,EAAD,CACIW,MAASmB,KAAKd,MAAML,MACpBC,SAAYkB,KAAKd,MAAMJ,eAQnC,4BAAQZ,UAAU,aAEd,wBAAIA,UAAU,aAAd,uBACI,uBAAGA,UAAU,QAAb,2CAWZ,kBAAC,EAAD,KACKC,QAAQC,IAAI4B,KAAKd,MAAME,UACxB,yBAAKlB,UAAY,OAChB8B,KAAKd,MAAME,SAASE,KAAI,SAAAW,GAErB,OAEA,yBAAK/B,UAAY,WAAWgC,MAAO,CAAC,gBAAiB,SACjD,kBAAC,EAAD,CACI3B,YAAe,EAAKA,YACpBC,GAAMyB,EAAUzB,GAChB2B,IAAOF,EAAUzB,GACjBH,MAAS4B,EAAU5B,cAUnC,gCACI,+DAAoC,gCAAQ,uBAAG+B,KAAK,4CAAR,mB,GApH1CC,c,MCDlBC,IAASC,OACL,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.77376f02.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.css\";\n\n// Static component that render image to the screen\nconst Card = props => {\n\n    //JSX\n    return (\n        \n        <div className=\"card img-container hover\">\n            {console.log(props.image)}\n\n            <img className=\"shuffleCard\" onClick={() => {\n                \n                props.shuffleCard(props.id)\n            \n            }} id={props.id} src={props.image} alt={props.alt}/>\n    \n        </div>\n    )\n}\nexport default Card;","import React from \"react\";\nimport \"./score.css\";\n\n// Static component that render image to the screen\nlet Score = props => {\n\n    //JSX\n    return(\n        <div classNamw=\"gameScore\">\n            <h3 className=\"score\">Your Score : {props.score} | Top Score: {props.topScore}</h3>\n            {/* <h3 className=\"status\">Top Score: {props.topScore}</h3> */}\n        </div>\n    )\n}\n\nexport default Score;","import React from \"react\";\nimport \"./wrapper.css\";\n\n// Static component that render image to the screen\nconst Wrapper = props => {\n\n    //JSX\n    return(\n        <div className=\"wrapper\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Wrapper;","import React, { Component } from \"react\";\nimport Card from \"./components/Card/card\";\nimport Score from \"./components/Score/score\";\nimport Wrapper from \"./components/Wrapper/wrapper\";\nimport futurama from \"./image.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n    // Initial state before mount\n    state = {\n        status: \"\",\n        topScore: 0, // the highest score from last game\n        score: 0,\n        futurama\n    };\n\n    // function to shuffle the card when user clicks the card\n    shuffleCard = id => {\n        \n        \n        // let clickedCard = this.state.clickedCard;\n\n        let newFuturama = this.state.futurama.map( card => {\n\n              // Since include() is string method, change card.id to string\n              \n            if(card.id.toString().includes(id)){\n                if(card.clicked){ // if  click = true (means been clicked twice)\n\n                     this.setState({score: 0}) // penalize user by setting their score back to 0\n\n                }else { // else click = undefined (user hasn't clicked the card)\n\n                    this.setState({score: this.state.score+1}) // update the score by adding 1 point to it\n\n                        if(this.state.score >= this.state.topScore){ //increase topscore by 1 when the score increase by 1\n\n                            this.setState({topScore : this.state.topScore +1 })\n                        }\n\n                    card.clicked = true; // turn the click property to true as a proof that user has clicked the card\n                }\n            }\n\n        // Have to return card\n        return card\n\n        })\n\n\n        if(this.state.score === 0){ // when score = 0, return the array with new clicked props as undefined (mean user hasn't clicked card)\n            newFuturama = newFuturama.map(card => {\n                card.clicked = undefined;\n                return card;\n            })\n        }\n\n        newFuturama = newFuturama.sort(() => {\n           return Math.random()- 0.5 // make the card shuffle\n        })\n          this.setState({futurama : newFuturama}) // reset the game, create new array\n    }\n\n    //Map over componenet using this.state and render all components\n    render() {\n\n        return (\n\n            <div className=\"App\">\n\n          \n           <nav className = \"nav\">\n               <ul className =\"nav justify-content-center\">\n                   <li className =\"nav-item\">\n                        <a className=\"nav-link active\">\n                        <Score \n                            score = {this.state.score} \n                            topScore = {this.state.topScore}\n                            // status = {this.state.status}\n                        />\n                        </a>\n                   </li>\n               </ul>\n           </nav>\n             {/* Header */}\n                <header className=\"appHeader\">\n\n                    <h1 className=\"App-Title\">FUTURAMA clicky game\n                        <p className=\"rule\">Try not to click the same card TWICE!</p>\n                    </h1>\n                      \n                    \n                </header>\n\n            {/* Score Section */}\n            \n\n\n            {/* //Wrapper  */}\n            <Wrapper>\n                {console.log(this.state.futurama)}\n                <div className = \"row\">\n                {this.state.futurama.map(character => {\n                    \n                    return (\n                    //Render Image\n                    <div className = \"col-sm-2\" style={{\"margin-bottom\": \"15px\"}}>\n                        <Card \n                            shuffleCard = {this.shuffleCard}\n                            id = {character.id}\n                            key = {character.id}\n                            image = {character.image}\n                        />\n                    </div>\n                    ) \n                })}\n                </div>\n              \n            </Wrapper>\n\n            {/* Footer */}\n            <footer>\n                <p>Futurama Memory Game designed by <strong><a href=\"https://github.com/ngavu2712/Memory-Game\">Anna Vu</a></strong></p>\n            </footer>\n\n        </div>\n        )\n    }\n\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\"\n\nReactDOM.render(\n    <App />, document.getElementById(\"root\")\n);"],"sourceRoot":""}